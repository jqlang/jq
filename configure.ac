m4_define([jq_version], m4_esyscmd_s([git describe --always --dirty --match 'jq-*'|sed 's/^jq-//']))

AC_INIT([jq], [jq_version], [mu@netsoc.tcd.ie],
             [jq], [http://stedolan.github.com/jq/])

dnl Created autoconf implementation thompson@dtosolutions, 26NOV12
AC_PREREQ([2.61])
AC_CONFIG_MACRO_DIR([cf])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([parallel-tests foreign -Wall])
AM_SILENT_RULES([yes])
AC_PROG_CC
AC_PROG_CC_STDC
AC_PROG_CPP_WERROR
AC_PROG_YACC
AC_OBJEXT
AC_EXEEXT
LT_INIT([shared static win32-dll])
AM_PROG_CC_C_O

dnl couldn't use AM_PROG_LEX as it doesn't support header files like the
dnl AC_PROG_YACC macros...

dnl check -lm functions
AC_FIND_LIBM_FUNC(acos, [0.2])
AC_FIND_LIBM_FUNC(acosh, [0.2])
AC_FIND_LIBM_FUNC(asin, [0.2])
AC_FIND_LIBM_FUNC(asinh, [0.2])
AC_FIND_LIBM_FUNC(atan, [0.2])
AC_FIND_LIBM_FUNC(atan2, [0.2, 0.2])
AC_FIND_LIBM_FUNC(atanh, [0.2])
AC_FIND_LIBM_FUNC(cbrt, [0.2])
AC_FIND_LIBM_FUNC(cos, [0.2])
AC_FIND_LIBM_FUNC(cosh, [0.2])
AC_FIND_LIBM_FUNC(erfc, [0.2])
AC_FIND_LIBM_FUNC(exp, [0.2])
AC_FIND_LIBM_FUNC(exp2, [0.2])
AC_FIND_LIBM_FUNC(expm1, [0.2])
AC_FIND_LIBM_FUNC(fabs, [0.2])
AC_FIND_LIBM_FUNC(fdim, [0.2, 0.2])
AC_FIND_LIBM_FUNC(floor, [0.2])
AC_FIND_LIBM_FUNC(fmax, [0.2, 0.2])
AC_FIND_LIBM_FUNC(fmin, [0.2, 0.2])
AC_FIND_LIBM_FUNC(frexp, [0.2, 0.2])
AC_FIND_LIBM_FUNC(gamma, [0.2])
AC_FIND_LIBM_FUNC(hypot, [0.2, 0.2])
AC_FIND_LIBM_FUNC(j0, [0.2])
AC_FIND_LIBM_FUNC(j1, [0.2])
AC_FIND_LIBM_FUNC(jn, [0.2, 0.2])
AC_FIND_LIBM_FUNC(ldexp, [0.2, 0.2])
AC_FIND_LIBM_FUNC(lgamma, [0.2])
AC_FIND_LIBM_FUNC(lgamma_r, [0.2, 0.2])
AC_FIND_LIBM_FUNC(log, [0.2])
AC_FIND_LIBM_FUNC(log10, [0.2])
AC_FIND_LIBM_FUNC(log1p, [0.2])
AC_FIND_LIBM_FUNC(log2, [0.2])
AC_FIND_LIBM_FUNC(logb, [0.2])
AC_FIND_LIBM_FUNC(nearbyint, [0.2])
AC_FIND_LIBM_FUNC(nextafter, [0.2, 0.2])
AC_FIND_LIBM_FUNC(nexttoward, [0.2, 0.2])
AC_FIND_LIBM_FUNC(pow, [0.2, 0.2])
AC_FIND_LIBM_FUNC(remainder, [0.2, 0.2])
AC_FIND_LIBM_FUNC(rint, [0.2])
AC_FIND_LIBM_FUNC(significand, [0.2])
AC_FIND_LIBM_FUNC(sin, [0.2])
AC_FIND_LIBM_FUNC(sinh, [0.2])
AC_FIND_LIBM_FUNC(sqrt, [0.2])
AC_FIND_LIBM_FUNC(tan, [0.2])
AC_FIND_LIBM_FUNC(tanh, [0.2])
AC_FIND_LIBM_FUNC(tgamma, [0.2])
AC_FIND_LIBM_FUNC(trunc, [0.2])
AC_FIND_LIBM_FUNC(y0, [0.2])
AC_FIND_LIBM_FUNC(y1, [0.2])
AC_FIND_LIBM_FUNC(yn, [0.2, 0.2])

dnl check bison version
AC_MSG_CHECKING([bison version])
if test "$YACC" != "bison -y"; then
  AC_MSG_RESULT([not bison])
elif $YACC --help | grep -- --warnings >/dev/null; then 
  AC_MSG_RESULT([ok])
else 
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([You need bison version 2.5 or more recent.])
fi

dnl
dnl these program checks should probably be deleted
dnl

AC_PROG_LEX
if test "x$LEX" != xflex; then
  LEX="$SHELL $missing_dir/missing flex"
fi

dnl Check for valgrind
AC_CHECK_PROGS(valgrind_cmd, valgrind)
if test "x$valgrind_cmd" = "x" ; then
    AC_MSG_WARN([valgrind is required to test jq.])
fi


dnl Don't attempt to build docs if there's no Ruby lying around
AC_ARG_ENABLE([docs],
   AC_HELP_STRING([--disable-docs], [don't build docs]))

AS_IF([test "x$enable_docs" != "xno"],[
   AC_CHECK_PROGS(bundle_cmd, bundle)

   AC_CACHE_CHECK([for Ruby dependencies], [jq_cv_ruby_deps],
     [jq_cv_ruby_deps=yes;
        AS_IF([test "x$bundle_cmd" = "x" || \
        ! bmsg="`cd ${srcdir}/docs; "$bundle_cmd" check 2>/dev/null`"],[
           AC_MSG_WARN([$bmsg])
           cat <<EOF
*****************************************************************
*  Ruby dependencies for building jq documentation not found.   *
*  You can still build, install and hack on jq, but the manpage *
*  will not be rebuilt and some of the tests won't run.         *
*  See docs/README.md for how to install the docs dependencies. *
*****************************************************************
EOF
           jq_cv_ruby_deps=no
     ])])

   if test "x$jq_cv_ruby_deps" != "xyes"; then
     enable_docs=no
   fi
])

AM_CONDITIONAL([ENABLE_DOCS], [test "x$enable_docs" != xno])
AC_SUBST([BUNDLER], ["$bundle_cmd"])

AC_CONFIG_MACRO_DIR([config/m4])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT



# Tests are groups of three lines: program, input, expected output
# Blank lines and lines starting with # are ignored

@base64
""
""

@base64
"<>&'\"\t"
"PD4mJyIJ"

# decoding encoded output results in same text
(@base64|@base64d)
"<>&'\"\t"
"<>&'\"\t"

# regression test for #436
@base64
"foóbar\n"
"Zm/Ds2Jhcgo="

@base64d
""
""

@base64d
"="
""

@base64d
"Zm/Ds2Jhcgo="
"foóbar\n"

# optional trailing equals padding (With padding, this is cWl4YmF6Cg==)
@base64d
"cWl4YmF6Cg"
"qixbaz\n"

# base64url encoding (Section 5 of RFC 4648) without padding
@base64url
"ab>cd?"
"YWI-Y2Q_"

@base64url
"ab>cd?x"
"YWI-Y2Q_eA"

@base64url
"ab>cd?xy"
"YWI-Y2Q_eHk"

@base64url
"ab>cd?xyz"
"YWI-Y2Q_eHl6"

# base64url encoding (Section 5 of RFC 4648) with padding
@base64urlp
"ab>cd?"
"YWI-Y2Q_"

@base64urlp
"ab>cd?x"
"YWI-Y2Q_eA=="

@base64urlp
"ab>cd?xy"
"YWI-Y2Q_eHk="

@base64urlp
"ab>cd?xyz"
"YWI-Y2Q_eHl6"

# base64url decoding (Section 5 of RFC 4648)
@base64d
"YWI-"
"ab>"

@base64d
"Y2Q_"
"cd?"

@base64d
"YWI-Y2Q_"
"ab>cd?"

# invalid base64 characters (whitespace)
. | try @base64d catch .
"Not base64 data"
"string (\"Not base64...) is not valid base64 data"

# invalid base64 (too many bytes, QUJD = "ABCD"
. | try @base64d catch .
"QUJDa"
"string (\"QUJDa\") trailing base64 byte found"

#!/bin/sh

set -e

if which valgrind > /dev/null; then
    VALGRIND='valgrind --error-exitcode=1 --leak-check=full --suppressions=tests/onig.supp'
    VALGRINDQ=$VALGRIND' -q'
else
    VALGRIND=
fi

cat $@ | $VALGRINDQ ./jq --run-tests

d=
trap '[ -n "$d" ] && rm -rf "$d"' EXIT
d=`mktemp -d -t || true`
if [ -z "$d" ]; then
    echo "Your OS does not support mktemp(1) -d" 1>&2
    exit 0
fi

cat > "$d/.jq" <<EOF
def foo: "baz";
def f: "wat";
def f: "foo";
def g: "bar";
def fg: f+g;
EOF

cat > "$d/a.jq" <<EOF
def a: "a";
EOF

cat > "$d/b.jq" <<EOF
def a: "b";
def b: "c";
EOF

cat > "$d/c.jq" <<EOF
import a as foo;
def a: 0;
def c: foo::a + "c";
EOF

cat > "$d/syntaxerror.jq" <<EOF
wat;
EOF

if [ "`HOME=$d $VALGRINDQ ./jq -nr fg`" != foobar ]; then
    echo "Bug #479 appears to be back" 1>&2
    exit 1
fi

if [ `HOME=$d $VALGRINDQ ./jq --debug-dump-disasm -n fg | grep '^[a-z]' | wc -l` -gt 3 ]; then
    echo "Binding too many defs into program" 1>&2
    exit 1
fi

if ! $VALGRINDQ ./jq -ner -L $d 'import a as foo; import b as bar; import a as foobar; def fooa: foo::a; [fooa, bar::a, bar::b, foo::a, foobar::a] | . == ["a","b","c","a","a"]' > /dev/null; then
    echo "Module system appears to be broken" 1>&2
    exit 1
fi

if ! $VALGRINDQ ./jq -ner -L $d 'import c as foo; [foo::a, foo::c] | . == [0,"ac"]' > /dev/null; then
    echo "Module system appears to be broken" 1>&2
    exit 1
fi

if $VALGRIND ./jq -ner -L $d 'import syntaxerror; .' > $d/out 2>&1; then
    echo "Module system appears to be broken" 1>&2
    exit 1
fi
if ! grep 'ERROR SUMMARY: 0 errors from 0 contexts' $d/out > /dev/null; then
    echo "Module system has memory errors when modules have syntax errors" 1>&2
    cat $d/out
    exit 1
fi
if ! grep '^error: syntax error,' $d/out > /dev/null; then
    echo "Module system not detecting syntax errors in modules correctly" 1>&2
    exit 1
fi

if $VALGRIND ./jq -ner -L $d '%::wat' > $d/out 2>&1 ||
   ! grep '^error: syntax error,' $d/out > /dev/null; then
    echo "Syntax errors not detected?" 1>&2
    exit 1
fi
if ! grep 'ERROR SUMMARY: 0 errors from 0 contexts' $d/out > /dev/null; then
    echo "Memory errors when programs have syntax errors" 1>&2
    cat $d/out
    exit 1
fi
